class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
        unordered_map<int,int> m;
        int c=0, j=0;
     for(int i=0;i<nums.size();i++){
        m[nums[i]]++;
     }   
     int k=m.size();
     m.clear();
     for(int i=0;i<nums.size();i++){
         j=i;
        
    while(j<nums.size() && m.size()<=k){
       m[nums[j]]++;
        j++;
        if(m.size()==k)
     c++;
        
     }
     
     m.clear();
    }
    return c;
    }
};


You are given an array nums consisting of positive integers.

We call a subarray of an array complete if the following condition is satisfied:

The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.
Return the number of complete subarrays.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
