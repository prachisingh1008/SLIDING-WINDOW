//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
      /*  int i=0,j=0,sum=0,c=0;
        int mx=INT_MIN;
       // int n=A.size();
       // if(n==1&&k!=nums[0])
       // return 0;
      while(j<N)
        {
            sum+=A[j];
        
      if(sum<K)
      j++;
if(sum==K)
        {
        mx=max(mx,j-i+1);
        j++;
        }

       
        if(sum>K)
        {
            while(sum>K){
            sum-=A[i];
        i++;
        if(sum==K)
        {
     mx=max(mx,j-i+1);
        
        }}
        j++;
        }
         
        
    }
    return mx;*/
     unordered_map<int, int> um;
    int sum = 0, maxLen = 0;
 
    // traverse the given array
    for (int i = 0; i < N; i++) {
 
        // accumulate sum
        sum += A[i];
 
        // when subarray starts from index '0'
        if (sum == K)
            maxLen = i + 1;
 
        // make an entry for 'sum' if it is
        // not present in 'um'
        if (um.find(sum) == um.end())
            um[sum] = i;
 
        // check if 'sum-k' is present in 'um'
        // or not
        if (um.find(sum - K) != um.end()) {
 
            // update maxLength
            if (maxLen < (i - um[sum -K]))
                maxLen = i - um[sum - K];
        }
    }
 
    // required maximum length
    return maxLen;
    } 

};

//{ Driver Code Starts.

int main() {
	//code
	
	int t;cin>>t;
	while(t--)
	{
	    int n, k;
	    cin>> n >> k;
	    int a[n];
	    
	    for(int i=0;i<n;i++)
	        cin>>a[i];
	   Solution ob;
	   cout << ob.lenOfLongSubarr(a, n , k)<< endl;
	    
	}
	
	return 0;
}
// } Driver Code Ends


Example 1:
 

Input :
A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.
