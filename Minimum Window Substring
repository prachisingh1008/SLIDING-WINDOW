class Solution {
public:
    string minWindow(string s, string t) {
     unordered_map<char, int> mp;
        int minlen=INT_MAX, start=0;
        for(auto ch:t){
            mp[ch]++;
        }
        int i=0,j=0,count=mp.size();
        while(j<s.length()){
            if(mp.find(s[j])!=mp.end()){
                mp[s[j]]--;//dec value in map , negative bhi ho sakti agar maan lo 2 baar t chahiy lekin 3 baar aa rha to
                if(mp[s[j]]==0)
                    count--;
            }
            if(count==0){
                while(count==0){
                    if(mp.find(s[i])!=mp.end()){
                        mp[s[i]]++;//substring ki length decrease kr rahe by removing elements from start
                        if(mp[s[i]]==1) {//means ye wala t ke liy use kia hai to count ki value bhi bhad jaaegi
                            count++;
                            if(j-i+1<minlen){
                                minlen=j-i+1;
                                start=i;
                            }
                        }
                    }
                    i++;
                }  
            }
            j++;
        }
        if(minlen==INT_MAX) return "";
        return s.substr(start, minlen);
        
    }
};


Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
