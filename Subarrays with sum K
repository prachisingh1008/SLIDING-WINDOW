class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
//agar sirf positive no hai array me tab ye chela
       /* int i=0,j=0,sum=0,c=0;
        int n=nums.size();
        if(n==1&&k!=nums[0])
        return 0;
      while(j<n)
        {
            sum+=nums[j];
        
      if(sum<k)
      j++;
if(sum==k)
        {
        c+=1;
        j++;
        }

       
        if(sum>k)
        {
            while(sum>k){
            sum-=nums[i];
        i++;
        if(sum==k)
        {
        c+=1;
        
        }}
        j++;
        }
         
        
    }
    return c;}*/

//2nd cose
//ye dono types od no ke liy valid hai
    unordered_map<int, int> prevSum;// ek sum kitni baar aaya hai ye count karta hai ye
 
    int res = 0;
 int N=nums.size();
    // Sum of elements so far.
    int currSum = 0;
 
    for (int i = 0; i < N; i++) {
 
        // Add current element to sum so far.
        currSum += nums[i];
 
        if (currSum == k)
            res++;
 
       
        if (prevSum.find(currSum - k) != prevSum.end())
 /* auto itApple = myMap.find("apple");
    if (itApple != myMap.end())  aise bhi likh sakte hai ye ek iterator return karega
    jisko check karenge ki last element ke baad jo  baad jo iterator hai usse equal hai ki nahi*/ 

            res += (prevSum[currSum - k]);//ye indicate karta hai ki itne subarrays me sum present hai
 
      
        prevSum[currSum]++;
    }
 
    return res;
    }
 
};



Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
