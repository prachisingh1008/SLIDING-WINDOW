class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
       
    unordered_map<char, int> m;
        int i = 0, j = 0;
        vector<int> result;

       for(int i=0;i<p.size();i++)
        {
            m[p[i]]++;//mapping krr rahe ki jo string ka anagram check karna usme har element kitni baar aa rha hai
        }
        int count = m.size();//size of map m
        while (j < s.size()) {
            if (m.count(s[j]) > 0) {
              
                m[s[j]]--;//process of checking anagram
                if (m[s[j]] == 0) {
                    count--;//ye isliy lia hai taki map dobara traverse na karna pade for printing final result
                }
            }

            if (j - i + 1 < p.size()) {
                j++;
            } else if (j - i + 1 == p.size()) {
                if (count == 0) {
                    result.push_back(i);//means anagram exist
                }

                if (m.count(s[i]) > 0) {
                    m[s[i]]++;//kyunki s[i] remove karna hai na to value increase kr denge map me
                    if (m[s[i]] == 1) {//agar 1 hai tabhi count++ isli kyunki agar value 1 se jayada hogi to uske liy already count ++ hua hoga
                        count++;
                    }
                }

                i++;
                j++;
            }
        }

        return result;
    }
};


Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.


Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
